/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package sistema.ui;

import java.awt.BorderLayout;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.io.File;
import java.io.StringReader;
import java.util.ArrayList;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.filechooser.FileNameExtensionFilter;
import main.Main;
import sistema.administracion.AdministracionArchivos;
import sistema.analisis.scanner;
import sistema.analisis.parser;
import sistema.bean.Galeria;
import sistema.bean.GraficaBarras;
import sistema.bean.GraficaLineas;
import sistema.bean.Token;
import sistema.bean.XYLine;
import sistema.graficas.GraficarGBarras;
import sistema.graficas.GraficarGLineas;
import sistema.graficas.GraficarTokens;

/**
 *
 * @author bruno
 */
public class VentanaPrincipal extends javax.swing.JFrame {
    //definicion botones ui
    private JButton btnAbrir;
    private JButton btnGuardar;
    private JButton btnAnalizar;
    private JButton btnGuardarComo;
    //definicion area de texto
    private JTextArea txtArea;
    //definicion del file chooser
    private JFileChooser fileChooser;
    //declaracion clase administrativa
    private AdministracionArchivos administracionArchivos;
    //declaracion variables graficadores
    GraficarTokens graficarTokens;
    GraficarGBarras graficadorGBarras;
    GraficarGLineas graficadorGLineas;
    
    /**
     * Creates new form ventanaPrincipal
     */
    public VentanaPrincipal() {
        initComponents();
        configuracionVentana();
        inicializarGraficadoras();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void configuracionVentana(){
        //propiedades de la ventana
        this.setSize(1250, 1000);
        this.setResizable(false);
        this.setLayout(new BorderLayout());
        //elementos de la ventana
        //panel de opciones
        JPanel panelOpciones = new JPanel(new FlowLayout(FlowLayout.CENTER));
        btnAbrir = new JButton("Abrir");
        btnGuardar = new JButton("Guardar");
        btnGuardarComo = new JButton("Guardar Como");
        panelOpciones.add(btnAbrir);
        panelOpciones.add(btnGuardar);
        panelOpciones.add(btnGuardarComo);
        this.add(panelOpciones, BorderLayout.PAGE_START);
        //panel de texto
        txtArea = new JTextArea();
        JScrollPane scroll = new JScrollPane(txtArea);
        this.add(scroll, BorderLayout.CENTER);
        //pie de ventana
        JPanel panelPie = new JPanel(new FlowLayout(FlowLayout.RIGHT));
        btnAnalizar = new JButton("Analizar");
        panelPie.add(btnAnalizar);
        this.add(panelPie, BorderLayout.PAGE_END);
        //instanciacion del file chooser y la clase administrativa
        fileChooser = new JFileChooser();
        administracionArchivos = new AdministracionArchivos();
        //definicion del filtro para archivos
        FileNameExtensionFilter filtro = new FileNameExtensionFilter(".gu", "gu");
        fileChooser.setFileFilter(filtro);
        inicializarFuncionamientoBotones();
    }
    
    private void inicializarFuncionamientoBotones(){
        //funcionamiento al boton
        btnAnalizar.addActionListener((ActionEvent ae) -> {
            btnAnalizar(ae);
        });
        
        btnAbrir.addActionListener((ae) -> {
            btnAbrirArchivo(ae);
        });
        btnGuardar.addActionListener((ae) -> {
            btnGuardarArchivo(ae, 1);
        });
        btnGuardarComo.addActionListener((ae) -> {
            btnGuardarArchivo(ae, 2);
        });
    }
    
    private void inicializarGraficadoras(){
        graficarTokens = new GraficarTokens();
        graficadorGBarras = new GraficarGBarras();
        graficadorGLineas = new GraficarGLineas();
    }

    private void btnAnalizar(java.awt.event.ActionEvent evt){
        try {
            limpiarContenidoGlobal();
            StringReader strReader = new StringReader(limpiarTexto(txtArea.getText())+"$");
            scanner scanner = new scanner(strReader);
            sistema.analisis.parser parser = new parser(scanner);
            parser.parse();
            reportarGraficas();
            reportarTokens();
//            if(Main.graficasDeBarras.size() > 0){
//                graficadorGBarras.graficarGB(Main.graficasDeBarras);
//            }
        } catch (Exception e) {
            System.out.println("Error al analizar la entrada");
            e.printStackTrace();
        }
    }
    
    private void limpiarContenidoGlobal(){
        Main.variablesGlobales = new ArrayList<>();
        Main.graficasDeBarras = new ArrayList<>();
        Main.graficasDeLineas = new ArrayList<>();
        Main.galerias = new ArrayList<>();
        Main.tokens = new ArrayList<>();
        Main.errores = new ArrayList<>();
    }
    
    private String limpiarTexto(String texto){
        if(texto.contains("“"))
            texto = texto.replace('“', '\"');
        if(texto.contains("”"))
            texto = texto.replace('”', '\"');
        return texto;
    }
    
    private void reportarTokens(){
        graficarTokens.graficarListaTokens();
        graficarTokens.graficarListaErrores();
    }
    
    private void reportarGraficas(){//primero debemos de validar que las graficas definidas sean validas, si no las removemos de las listas
        if(validarGBarras() & validarrGLineas()){
            if(validarGaleria()){//primero validamos que las galeras sean validas para poder pasar a generar las graficas necesarias
                for (Galeria galeria : Main.galerias) {
                    crearDirectorios(galeria.getNombre());
                    graficadorGBarras.graficarGB(galeria.getGraficas(), galeria.getNombre());
                    graficadorGLineas.graficarGB(galeria.getGraficas(), galeria.getNombre());
                }
            }
        }
    }
    
    private boolean validarGaleria(){//revisar/debugear
        for (Galeria galeria : Main.galerias ) {
            int existe = 0;
            ArrayList<String> porRemover = new ArrayList<>();
            for (String nombreGrafica : galeria.getGraficas()) {//validamos que los nombres de las graficas existan
                for (GraficaBarras graficaBarras : Main.graficasDeBarras) {
                    if(nombreGrafica.equals(graficaBarras.getId())){
                        existe = 1;
                        porRemover.add(graficaBarras.getId());
                        break;
                    }
                }
                if (existe == 0) {
                    for (GraficaLineas graficaLineas : Main.graficasDeLineas) {
                        if(nombreGrafica.equals(graficaLineas.getId())){
                            existe = 1;
                            porRemover.add(graficaLineas.getId());
                            break;
                        }
                    }
                }
            }
            if(porRemover.size() != 0){
                galeria.getGraficas().remove(porRemover);
            }
        }
        
        return true;
    }
    
    private boolean validarGBarras(){
        boolean resultado = true;
        ArrayList<GraficaBarras> porRemover = new ArrayList<>();
        for (GraficaBarras graficaBarras : Main.graficasDeBarras) {
            if(graficaBarras.getEjeX().size() == 0 | graficaBarras.getEjeY().size() == 0 | graficaBarras.getPuntosXY().size() == 0 | graficaBarras.getId() == null 
            | graficaBarras.getTitulo() == null | graficaBarras.getTituloX() == null | graficaBarras.getTituloY() == null){
                resultado = false;
                porRemover.add(graficaBarras);
                main.Main.errores.add(new Token("Grafica de Barras", "CARACTERISTICAS INCOMPLETAS", 0, 0));
            }
        }
        if(porRemover.size() != 0)
            Main.graficasDeBarras.removeAll(porRemover);
        return resultado;
    }
    
    private boolean validarrGLineas(){
        boolean resultado = true;
        ArrayList<GraficaLineas> porRemover = new ArrayList<>();
        ArrayList<XYLine> porRemoverLineas = new ArrayList<>();
        for (GraficaLineas graficaLineas : Main.graficasDeLineas) {
            if(graficaLineas.getLineas().size() == 0 | graficaLineas.getId() == null | graficaLineas.getTitulo() == null | graficaLineas.getTituloX() == null | graficaLineas.getTituloY()== null){
                resultado = false;
                porRemover.add(graficaLineas);
                main.Main.errores.add(new Token("Grafica de Lineas", "CARACTERISTICAS INCOMPLETAS", 0, 0));
            }
            if(resultado != false){
                for (XYLine linea : graficaLineas.getLineas()) {
                    if(linea.getGrosor() == 0 | linea.getColor()== null | linea.getNombre()== null | linea.getPuntos().size() == 0){
                        resultado = false;
                        porRemoverLineas.add(linea);
                        main.Main.errores.add(new Token("XYLine", "CARACTERISTICAS INCOMPLETAS", 0, 0));
                    }
                }
                if(porRemoverLineas.size() != 0)
                    graficaLineas.getLineas().removeAll(porRemoverLineas);
            }
        }
        if(porRemover.size() != 0)
            Main.graficasDeLineas.removeAll(porRemover);
        return resultado;
    }
    
    private boolean crearDirectorios(String path){
        boolean respuesta = false;
        try {
            File archivo = new File(path);
            respuesta = archivo.mkdirs();            
        } catch (Exception e) {
            System.err.println("ERROR AL CREAR DIRECTORIOS");
        }
        return respuesta;
    }
    
    private void btnAbrirArchivo(java.awt.event.ActionEvent evt){
        try {
            int retorno = fileChooser.showOpenDialog(this);
            if(retorno == JFileChooser.APPROVE_OPTION){
                this.setTitle(fileChooser.getSelectedFile().getPath());
                txtArea.setText(administracionArchivos.abrirArchivo(fileChooser.getSelectedFile().getPath()));
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    private void btnGuardarArchivo(java.awt.event.ActionEvent evt, int tipo){
        switch(tipo){
                case 1://guardar normal
                    if(!this.getTitle().equals("")){
                        administracionArchivos.guardarArchivo(this.getTitle(), txtArea.getText(), 1);
                    }else{
                        JOptionPane.showMessageDialog(this, "No existe referencia a un archivo", "Error al Guardar", JOptionPane.WARNING_MESSAGE);
                    }
                    break;
                case 2://guardar como
                        int retorno = fileChooser.showSaveDialog(this);
                        if(retorno == JFileChooser.APPROVE_OPTION){
                            this.setTitle(fileChooser.getSelectedFile().getPath()+".gu");
                            administracionArchivos.guardarArchivo(fileChooser.getSelectedFile().getPath()+".gu", txtArea.getText(), 2);
                        }
                    break;
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
