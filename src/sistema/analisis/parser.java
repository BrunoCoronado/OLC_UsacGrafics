
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package sistema.analisis;

import java_cup.runtime.*;
import sistema.bean.Galeria;
import sistema.bean.GraficaBarras;
import sistema.bean.GraficaLineas;
import sistema.bean.Variable;
import sistema.bean.XYLine;
import sistema.bean.Token;
import main.Main;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\077\000\002\002\004\000\002\002\004\000\002\017" +
    "\004\000\002\017\003\000\002\020\005\000\002\020\005" +
    "\000\002\020\005\000\002\020\005\000\002\003\004\000" +
    "\002\021\004\000\002\021\003\000\002\022\007\000\002" +
    "\022\007\000\002\004\004\000\002\015\004\000\002\015" +
    "\003\000\002\016\006\000\002\016\006\000\002\016\006" +
    "\000\002\016\006\000\002\016\010\000\002\016\010\000" +
    "\002\016\010\000\002\030\003\000\002\030\003\000\002" +
    "\032\005\000\002\032\003\000\002\005\005\000\002\005" +
    "\003\000\002\031\003\000\002\031\003\000\002\006\005" +
    "\000\002\006\007\000\002\007\004\000\002\023\004\000" +
    "\002\023\003\000\002\024\006\000\002\024\006\000\002" +
    "\024\006\000\002\024\006\000\002\024\005\000\002\010" +
    "\004\000\002\025\004\000\002\025\003\000\002\026\006" +
    "\000\002\026\006\000\002\026\006\000\002\026\010\000" +
    "\002\011\004\000\002\027\004\000\002\027\003\000\002" +
    "\012\011\000\002\013\005\000\002\013\007\000\002\014" +
    "\005\000\002\014\003\000\002\034\003\000\002\033\005" +
    "\000\002\033\005\000\002\033\005\000\002\033\005\000" +
    "\002\033\005\000\002\033\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\247\000\012\004\010\007\007\010\011\011\012\001" +
    "\002\000\004\002\251\001\002\000\014\004\010\007\007" +
    "\010\011\011\012\047\ufffe\001\002\000\004\047\247\001" +
    "\002\000\004\027\162\001\002\000\004\027\142\001\002" +
    "\000\004\027\033\001\002\000\004\027\013\001\002\000" +
    "\004\011\017\001\002\000\006\011\017\030\uffcf\001\002" +
    "\000\004\030\031\001\002\000\014\004\ufffa\007\ufffa\010" +
    "\ufffa\011\ufffa\047\ufffa\001\002\000\004\037\020\001\002" +
    "\000\004\046\021\001\002\000\004\036\022\001\002\000" +
    "\004\046\023\001\002\000\006\036\uffca\040\uffca\001\002" +
    "\000\006\036\026\040\025\001\002\000\004\026\030\001" +
    "\002\000\004\046\023\001\002\000\006\036\uffcb\040\uffcb" +
    "\001\002\000\006\011\uffce\030\uffce\001\002\000\014\004" +
    "\uffd1\007\uffd1\010\uffd1\011\uffd1\047\uffd1\001\002\000\004" +
    "\030\uffd0\001\002\000\014\012\034\013\040\014\036\020" +
    "\042\050\043\001\002\000\004\031\137\001\002\000\014" +
    "\004\ufffb\007\ufffb\010\ufffb\011\ufffb\047\ufffb\001\002\000" +
    "\004\031\134\001\002\000\016\012\034\013\040\014\036" +
    "\020\042\030\uffde\050\043\001\002\000\004\031\130\001" +
    "\002\000\004\030\127\001\002\000\004\034\051\001\002" +
    "\000\004\031\044\001\002\000\006\045\046\046\045\001" +
    "\002\000\010\026\uffea\033\uffea\036\uffea\001\002\000\010" +
    "\026\uffe9\033\uffe9\036\uffe9\001\002\000\004\026\050\001" +
    "\002\000\016\012\uffdd\013\uffdd\014\uffdd\020\uffdd\030\uffdd" +
    "\050\uffdd\001\002\000\012\021\056\022\052\023\055\024" +
    "\054\001\002\000\004\031\124\001\002\000\016\012\uffd9" +
    "\013\uffd9\014\uffd9\020\uffd9\030\uffd9\050\uffd9\001\002\000" +
    "\004\031\110\001\002\000\004\031\066\001\002\000\004" +
    "\031\063\001\002\000\014\021\056\022\052\023\055\024" +
    "\054\035\uffd6\001\002\000\004\035\061\001\002\000\016" +
    "\012\uffd8\013\uffd8\014\uffd8\020\uffd8\030\uffd8\050\uffd8\001" +
    "\002\000\004\035\uffd7\001\002\000\006\045\046\046\045" +
    "\001\002\000\004\026\065\001\002\000\014\021\uffd5\022" +
    "\uffd5\023\uffd5\024\uffd5\035\uffd5\001\002\000\010\037\072" +
    "\045\070\051\067\001\002\000\024\026\uffc3\030\uffc3\033" +
    "\uffc3\036\uffc3\040\uffc3\041\uffc3\042\uffc3\043\uffc3\044\uffc3" +
    "\001\002\000\012\026\uffe3\030\uffe3\033\uffe3\036\uffe3\001" +
    "\002\000\004\026\107\001\002\000\006\037\072\051\067" +
    "\001\002\000\022\026\uffc9\030\uffc9\033\uffc9\036\uffc9\041" +
    "\076\042\075\043\077\044\100\001\002\000\012\026\uffe4" +
    "\030\uffe4\033\uffe4\036\uffe4\001\002\000\006\037\072\051" +
    "\067\001\002\000\006\037\072\051\067\001\002\000\006" +
    "\037\072\051\067\001\002\000\006\037\072\051\067\001" +
    "\002\000\024\026\uffc5\030\uffc5\033\uffc5\036\uffc5\040\uffc5" +
    "\041\uffc5\042\uffc5\043\uffc5\044\uffc5\001\002\000\024\026" +
    "\uffc6\030\uffc6\033\uffc6\036\uffc6\040\uffc6\041\uffc6\042\uffc6" +
    "\043\uffc6\044\uffc6\001\002\000\024\026\uffc8\030\uffc8\033" +
    "\uffc8\036\uffc8\040\uffc8\041\uffc8\042\uffc8\043\077\044\100" +
    "\001\002\000\024\026\uffc7\030\uffc7\033\uffc7\036\uffc7\040" +
    "\uffc7\041\uffc7\042\uffc7\043\077\044\100\001\002\000\014" +
    "\040\106\041\076\042\075\043\077\044\100\001\002\000" +
    "\024\026\uffc4\030\uffc4\033\uffc4\036\uffc4\040\uffc4\041\uffc4" +
    "\042\uffc4\043\uffc4\044\uffc4\001\002\000\014\021\uffd3\022" +
    "\uffd3\023\uffd3\024\uffd3\035\uffd3\001\002\000\004\032\111" +
    "\001\002\000\004\027\112\001\002\000\010\037\072\045" +
    "\070\051\067\001\002\000\006\033\114\036\115\001\002" +
    "\000\004\026\117\001\002\000\004\027\112\001\002\000" +
    "\006\033\uffcd\036\uffcd\001\002\000\014\021\uffd2\022\uffd2" +
    "\023\uffd2\024\uffd2\035\uffd2\001\002\000\004\036\121\001" +
    "\002\000\010\037\072\045\070\051\067\001\002\000\004" +
    "\030\123\001\002\000\006\033\uffcc\036\uffcc\001\002\000" +
    "\006\045\046\046\045\001\002\000\004\026\126\001\002" +
    "\000\014\021\uffd4\022\uffd4\023\uffd4\024\uffd4\035\uffd4\001" +
    "\002\000\014\004\uffe0\007\uffe0\010\uffe0\011\uffe0\047\uffe0" +
    "\001\002\000\006\045\046\046\045\001\002\000\004\026" +
    "\132\001\002\000\016\012\uffdb\013\uffdb\014\uffdb\020\uffdb" +
    "\030\uffdb\050\uffdb\001\002\000\004\030\uffdf\001\002\000" +
    "\006\045\046\046\045\001\002\000\004\026\136\001\002" +
    "\000\016\012\uffda\013\uffda\014\uffda\020\uffda\030\uffda\050" +
    "\uffda\001\002\000\006\045\046\046\045\001\002\000\004" +
    "\026\141\001\002\000\016\012\uffdc\013\uffdc\014\uffdc\020" +
    "\uffdc\030\uffdc\050\uffdc\001\002\000\006\005\143\006\146" +
    "\001\002\000\004\045\156\001\002\000\010\005\143\006" +
    "\146\030\ufff7\001\002\000\004\030\154\001\002\000\004" +
    "\045\150\001\002\000\014\004\ufffd\007\ufffd\010\ufffd\011" +
    "\ufffd\047\ufffd\001\002\000\004\025\151\001\002\000\004" +
    "\046\152\001\002\000\004\026\153\001\002\000\010\005" +
    "\ufff6\006\ufff6\030\ufff6\001\002\000\014\004\ufff9\007\ufff9" +
    "\010\ufff9\011\ufff9\047\ufff9\001\002\000\004\030\ufff8\001" +
    "\002\000\004\025\157\001\002\000\006\037\072\051\067" +
    "\001\002\000\004\026\161\001\002\000\010\005\ufff5\006" +
    "\ufff5\030\ufff5\001\002\000\020\012\167\013\166\014\165" +
    "\015\171\016\170\017\174\050\164\001\002\000\014\004" +
    "\ufffc\007\ufffc\010\ufffc\011\ufffc\047\ufffc\001\002\000\004" +
    "\031\244\001\002\000\004\031\241\001\002\000\004\031" +
    "\236\001\002\000\004\031\233\001\002\000\004\031\223" +
    "\001\002\000\004\031\213\001\002\000\022\012\167\013" +
    "\166\014\165\015\171\016\170\017\174\030\ufff2\050\164" +
    "\001\002\000\004\030\211\001\002\000\004\031\175\001" +
    "\002\000\004\032\176\001\002\000\004\027\200\001\002" +
    "\000\006\033\205\036\206\001\002\000\010\037\072\045" +
    "\070\051\067\001\002\000\004\036\202\001\002\000\010" +
    "\037\072\045\070\051\067\001\002\000\004\030\204\001" +
    "\002\000\006\033\uffe1\036\uffe1\001\002\000\004\026\210" +
    "\001\002\000\004\027\200\001\002\000\006\033\uffe2\036" +
    "\uffe2\001\002\000\022\012\uffeb\013\uffeb\014\uffeb\015\uffeb" +
    "\016\uffeb\017\uffeb\030\uffeb\050\uffeb\001\002\000\014\004" +
    "\ufff4\007\ufff4\010\ufff4\011\ufff4\047\ufff4\001\002\000\004" +
    "\030\ufff3\001\002\000\004\032\214\001\002\000\006\045" +
    "\046\046\045\001\002\000\006\033\217\036\220\001\002" +
    "\000\006\033\uffe7\036\uffe7\001\002\000\004\026\222\001" +
    "\002\000\006\045\046\046\045\001\002\000\006\033\uffe8" +
    "\036\uffe8\001\002\000\022\012\uffed\013\uffed\014\uffed\015" +
    "\uffed\016\uffed\017\uffed\030\uffed\050\uffed\001\002\000\004" +
    "\032\224\001\002\000\010\037\072\045\070\051\067\001" +
    "\002\000\006\033\uffe5\036\uffe5\001\002\000\006\033\227" +
    "\036\230\001\002\000\004\026\232\001\002\000\010\037" +
    "\072\045\070\051\067\001\002\000\006\033\uffe6\036\uffe6" +
    "\001\002\000\022\012\uffec\013\uffec\014\uffec\015\uffec\016" +
    "\uffec\017\uffec\030\uffec\050\uffec\001\002\000\006\045\046" +
    "\046\045\001\002\000\004\026\235\001\002\000\022\012" +
    "\ufff0\013\ufff0\014\ufff0\015\ufff0\016\ufff0\017\ufff0\030\ufff0" +
    "\050\ufff0\001\002\000\006\045\046\046\045\001\002\000" +
    "\004\026\240\001\002\000\022\012\uffef\013\uffef\014\uffef" +
    "\015\uffef\016\uffef\017\uffef\030\uffef\050\uffef\001\002\000" +
    "\006\045\046\046\045\001\002\000\004\026\243\001\002" +
    "\000\022\012\uffee\013\uffee\014\uffee\015\uffee\016\uffee\017" +
    "\uffee\030\uffee\050\uffee\001\002\000\006\045\046\046\045" +
    "\001\002\000\004\026\246\001\002\000\022\012\ufff1\013" +
    "\ufff1\014\ufff1\015\ufff1\016\ufff1\017\ufff1\030\ufff1\050\ufff1" +
    "\001\002\000\004\002\000\001\002\000\004\047\uffff\001" +
    "\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\247\000\010\002\003\017\005\020\004\001\001\000" +
    "\002\001\001\000\006\017\247\020\004\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\011\015\012\013\027\014" +
    "\001\001\000\006\012\013\027\031\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\014\023\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\014\026" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\007\034\023\040\024\036" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\023\132\024\036\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\030\046\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\010\052\025" +
    "\057\026\056\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\025\061\026\056\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\030\063\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\031\070\033\072" +
    "\034\073\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\033\104\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\033\103\001\001\000\004\033" +
    "\102\001\001\000\004\033\101\001\001\000\004\033\100" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\112\001" +
    "\001\000\010\031\117\033\072\034\073\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\115\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\031\121\033\072\034\073\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\030\124\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\030\130\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\030\134\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\030\137\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\003\146\021\144\022\143\001\001\000" +
    "\002\001\001\000\006\021\154\022\143\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\033\072\034\157\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\004\162\015\172\016\171\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\015\211\016\171\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\176\001" +
    "\001\000\002\001\001\000\010\031\200\033\072\034\073" +
    "\001\001\000\002\001\001\000\010\031\202\033\072\034" +
    "\073\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\006\206\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\030\215\032\214\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\030\215" +
    "\032\220\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\005\225\031\224\033\072\034\073" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\005\230\031\224\033\072\034\073\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\030\233\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\030\236" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\030" +
    "\241\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\030\244\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private GraficaBarras gBarras = new GraficaBarras();
    private GraficaLineas gLineas = new GraficaLineas();
    private XYLine xyLine = new XYLine();
    private Galeria galeria = new Galeria();

    public void syntax_error(Symbol s){ 
        System.err.println("Error Sintáctico en la Línea " + (s.left) +" Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
        main.Main.errores.add(new Token(s.value.toString(), "ERROR SINTACTICO - NO SE ESPERABA ESTE SIMBOLO", s.left, s.right));
    } 

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.err.println("Error síntactico irrecuperable en la Línea " + (s.left)+ " Columna "+s.right+". Componente " + s.value + " no reconocido.");
        main.Main.errores.add(new Token(s.value.toString(), "ERROR SINTACTICO IRRECUPERABLE - SIMBOLO NO RECONODIO", s.left, s.right));
    }  


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= A EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // A ::= A1 aceptacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("A",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // A1 ::= A2 A1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("A1",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // A1 ::= A2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("A1",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // A2 ::= definirglobales llaveabre B 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("A2",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // A2 ::= graficabarras llaveabre C 
            {
              Object RESULT =null;
		
            main.Main.graficasDeBarras.add(gBarras);
            gBarras = new GraficaBarras();    
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("A2",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // A2 ::= graficalineas llaveabre I 
            {
              Object RESULT =null;
		
            main.Main.graficasDeLineas.add(gLineas);
            gLineas = new GraficaLineas();
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("A2",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // A2 ::= galeria llaveabre K 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("A2",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // B ::= B1 llavecierra 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("B",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // B1 ::= B2 B1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("B1",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // B1 ::= B2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("B1",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // B2 ::= str identificador igual cadena puntoycoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            main.Main.variablesGlobales.add(new Variable("str", a, b));
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("B2",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // B2 ::= entero identificador igual O puntoycoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            main.Main.variablesGlobales.add(new Variable("entero", a, b));
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("B2",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // C ::= C1 llavecierra 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("C",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // C1 ::= C2 C1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("C1",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // C1 ::= C2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("C1",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // C2 ::= id dospuntos D puntoycoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            gBarras.setId(a);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("C2",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // C2 ::= titulo dospuntos D puntoycoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            gBarras.setTitulo(a);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("C2",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // C2 ::= titulox dospuntos D puntoycoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            gBarras.setTituloX(a);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("C2",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // C2 ::= tituloy dospuntos D puntoycoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            gBarras.setTituloY(a);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("C2",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // C2 ::= ejex dospuntos corcheteabre E corchetecierra puntoycoma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("C2",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // C2 ::= ejey dospuntos corcheteabre F corchetecierra puntoycoma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("C2",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // C2 ::= puntosxy dospuntos corcheteabre H corchetecierra puntoycoma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("C2",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // D ::= cadena 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = a;    
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("D",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // D ::= identificador 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            String valor = null;
            try{
                valor = String.valueOf(Main.buscarVariableGlobal(a));
            }catch(Exception ex){
                System.out.println("Error al recuperar variable String");
            }
            if(valor != null){
                RESULT =  String.valueOf(Main.buscarVariableGlobal(a));    
            }else
            {
                System.out.println("Variable " + a + "No esta declarada");
                RESULT = "";
            }
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("D",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // E ::= E coma E 
            {
              Integer RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // E ::= D 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            gBarras.setEjeX(a); 
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // F ::= F coma F 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("F",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // F ::= G 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            gBarras.setEjeY(a); 
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("F",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // G ::= O 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = a;    
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("G",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // G ::= identificador 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            try{
                RESULT =  (int)Main.buscarVariableGlobal(a);
            }catch(Exception ex){
                System.out.println("Error al recuperar variable int");
                RESULT = 0;
            }
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("G",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // H ::= H coma H 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("H",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // H ::= llaveabre G coma G llavecierra 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            gBarras.setPuntosXY(a,b); 
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("H",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // I ::= I1 llavecierra 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("I",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // I1 ::= I2 I1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("I1",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // I1 ::= I2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("I1",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // I2 ::= id dospuntos D puntoycoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            gLineas.setId(a);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("I2",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // I2 ::= titulo dospuntos D puntoycoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            gLineas.setTitulo(a);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("I2",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // I2 ::= titulox dospuntos D puntoycoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            gLineas.setTituloX(a);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("I2",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // I2 ::= tituloy dospuntos D puntoycoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            gLineas.setTituloY(a);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("I2",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // I2 ::= definirxyline interrogacionabre J 
            {
              Object RESULT =null;
		
            gLineas.setLineas(xyLine);
            xyLine = new XYLine();
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("I2",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // J ::= J1 interrogacioncierra 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("J",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // J1 ::= J2 J1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("J1",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // J1 ::= J2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("J1",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // J2 ::= nombre dospuntos D puntoycoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            xyLine.setNombre(a);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("J2",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // J2 ::= color dospuntos D puntoycoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            xyLine.setColor(a);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("J2",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // J2 ::= grosor dospuntos G puntoycoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            xyLine.setGrosor(a);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("J2",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // J2 ::= puntos dospuntos corcheteabre M corchetecierra puntoycoma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("J2",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // K ::= K1 llavecierra 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("K",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // K1 ::= L K1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("K1",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // K1 ::= L 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("K1",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // L ::= galeria parentesisabre cadena coma N parentesiscierra puntoycoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
            galeria.setNombre(a);
            main.Main.galerias.add(galeria);
            galeria = new Galeria();
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // M ::= M coma M 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("M",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // M ::= llaveabre G coma G llavecierra 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            xyLine.setPuntos(a,b); 
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("M",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // N ::= N coma N 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("N",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // N ::= cadena 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            galeria.setGraficas(a);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("N",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // O ::= P 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = a;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("O",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // P ::= P suma P 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = a+b;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("P",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // P ::= P resta P 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = a-b;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("P",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // P ::= P multiplicacion P 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = a*b;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("P",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // P ::= P division P 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            try{
                RESULT = a/b;
            }catch(Exception ex){System.out.println("Error al realizar division");}
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("P",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // P ::= parentesisabre P parentesiscierra 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                RESULT = a;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("P",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // P ::= numero 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            try{
                RESULT = Integer.parseInt(a);
            }catch(Exception ex){
                System.out.println("Error al detectar valor numerico en variable int");
                RESULT = 0;
            }
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("P",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
