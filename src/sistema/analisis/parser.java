
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package sistema.analisis;

import java_cup.runtime.*;
import java.util.ArrayList;
import sistema.bean.Variable;
import sistema.bean.GraficaBarras;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\053\000\002\002\004\000\002\002\006\000\002\002" +
    "\006\000\002\002\006\000\002\002\006\000\002\002\003" +
    "\000\002\003\010\000\002\003\010\000\002\003\003\000" +
    "\002\004\007\000\002\004\007\000\002\004\007\000\002" +
    "\004\007\000\002\004\011\000\002\004\011\000\002\004" +
    "\011\000\002\004\003\000\002\015\003\000\002\015\003" +
    "\000\002\005\005\000\002\005\003\000\002\006\005\000" +
    "\002\006\003\000\002\016\003\000\002\016\003\000\002" +
    "\007\011\000\002\007\007\000\002\010\004\000\002\010" +
    "\005\000\002\010\003\000\002\011\007\000\002\011\007" +
    "\000\002\011\007\000\002\011\011\000\002\011\003\000" +
    "\002\012\012\000\002\012\003\000\002\013\005\000\002" +
    "\013\003\000\002\014\006\000\002\014\006\000\002\014" +
    "\006\000\002\014\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\225\000\014\004\006\007\005\010\007\011\010\047" +
    "\011\001\002\000\004\002\227\001\002\000\004\027\144" +
    "\001\002\000\004\027\124\001\002\000\004\027\031\001" +
    "\002\000\004\027\012\001\002\000\004\002\ufffc\001\002" +
    "\000\006\011\015\030\014\001\002\000\014\004\006\007" +
    "\005\010\007\011\010\047\011\001\002\000\014\004\uffdd" +
    "\007\uffdd\010\uffdd\011\uffdd\047\uffdd\001\002\000\004\037" +
    "\016\001\002\000\004\046\017\001\002\000\004\036\020" +
    "\001\002\000\004\046\022\001\002\000\004\040\025\001" +
    "\002\000\006\036\023\040\uffdb\001\002\000\004\046\022" +
    "\001\002\000\004\040\uffdc\001\002\000\004\026\026\001" +
    "\002\000\006\011\015\030\014\001\002\000\014\004\uffde" +
    "\007\uffde\010\uffde\011\uffde\047\uffde\001\002\000\004\002" +
    "\ufffd\001\002\000\016\012\032\013\036\014\034\020\037" +
    "\030\035\050\040\001\002\000\004\031\121\001\002\000" +
    "\014\004\006\007\005\010\007\011\010\047\011\001\002" +
    "\000\004\031\115\001\002\000\014\004\uffe4\007\uffe4\010" +
    "\uffe4\011\uffe4\047\uffe4\001\002\000\004\031\112\001\002" +
    "\000\004\034\050\001\002\000\004\031\043\001\002\000" +
    "\016\012\032\013\036\014\034\020\037\030\035\050\040" +
    "\001\002\000\014\004\uffe6\007\uffe6\010\uffe6\011\uffe6\047" +
    "\uffe6\001\002\000\006\045\045\046\044\001\002\000\010" +
    "\026\ufff0\033\ufff0\036\ufff0\001\002\000\010\026\uffef\033" +
    "\uffef\036\uffef\001\002\000\004\026\047\001\002\000\016" +
    "\012\uffda\013\uffda\014\uffda\020\uffda\030\uffda\050\uffda\001" +
    "\002\000\014\021\056\022\052\023\055\024\054\035\051" +
    "\001\002\000\014\004\uffdf\007\uffdf\010\uffdf\011\uffdf\047" +
    "\uffdf\001\002\000\004\031\106\001\002\000\014\004\uffe5" +
    "\007\uffe5\010\uffe5\011\uffe5\047\uffe5\001\002\000\004\031" +
    "\067\001\002\000\004\031\063\001\002\000\004\031\057" +
    "\001\002\000\006\045\045\046\044\001\002\000\004\026" +
    "\061\001\002\000\014\021\056\022\052\023\055\024\054" +
    "\035\051\001\002\000\014\004\uffe3\007\uffe3\010\uffe3\011" +
    "\uffe3\047\uffe3\001\002\000\006\045\045\046\044\001\002" +
    "\000\004\026\065\001\002\000\014\021\056\022\052\023" +
    "\055\024\054\035\051\001\002\000\014\004\uffe1\007\uffe1" +
    "\010\uffe1\011\uffe1\047\uffe1\001\002\000\004\032\070\001" +
    "\002\000\004\027\072\001\002\000\004\033\103\001\002" +
    "\000\006\045\074\051\073\001\002\000\010\030\uffea\033" +
    "\uffea\036\uffea\001\002\000\010\030\uffe9\033\uffe9\036\uffe9" +
    "\001\002\000\004\036\076\001\002\000\006\045\074\051" +
    "\073\001\002\000\004\030\100\001\002\000\006\033\uffe7" +
    "\036\101\001\002\000\004\027\072\001\002\000\004\033" +
    "\uffe8\001\002\000\004\026\104\001\002\000\014\021\056" +
    "\022\052\023\055\024\054\035\051\001\002\000\014\004" +
    "\uffe0\007\uffe0\010\uffe0\011\uffe0\047\uffe0\001\002\000\006" +
    "\045\045\046\044\001\002\000\004\026\110\001\002\000" +
    "\014\021\056\022\052\023\055\024\054\035\051\001\002" +
    "\000\014\004\uffe2\007\uffe2\010\uffe2\011\uffe2\047\uffe2\001" +
    "\002\000\006\045\045\046\044\001\002\000\004\026\114" +
    "\001\002\000\016\012\uffd8\013\uffd8\014\uffd8\020\uffd8\030" +
    "\uffd8\050\uffd8\001\002\000\006\045\045\046\044\001\002" +
    "\000\004\026\117\001\002\000\016\012\uffd7\013\uffd7\014" +
    "\uffd7\020\uffd7\030\uffd7\050\uffd7\001\002\000\004\002\ufffe" +
    "\001\002\000\006\045\045\046\044\001\002\000\004\026" +
    "\123\001\002\000\016\012\uffd9\013\uffd9\014\uffd9\020\uffd9" +
    "\030\uffd9\050\uffd9\001\002\000\010\005\125\006\127\030" +
    "\126\001\002\000\004\045\137\001\002\000\014\004\ufff9" +
    "\007\ufff9\010\ufff9\011\ufff9\047\ufff9\001\002\000\004\045" +
    "\132\001\002\000\014\004\006\007\005\010\007\011\010" +
    "\047\011\001\002\000\004\002\000\001\002\000\004\025" +
    "\133\001\002\000\004\046\134\001\002\000\004\026\135" +
    "\001\002\000\010\005\125\006\127\030\126\001\002\000" +
    "\014\004\ufffb\007\ufffb\010\ufffb\011\ufffb\047\ufffb\001\002" +
    "\000\004\025\140\001\002\000\004\051\141\001\002\000" +
    "\004\026\142\001\002\000\010\005\125\006\127\030\126" +
    "\001\002\000\014\004\ufffa\007\ufffa\010\ufffa\011\ufffa\047" +
    "\ufffa\001\002\000\022\012\151\013\150\014\147\015\154" +
    "\016\152\017\155\030\153\050\146\001\002\000\014\004" +
    "\006\007\005\010\007\011\010\047\011\001\002\000\004" +
    "\031\222\001\002\000\004\031\216\001\002\000\004\031" +
    "\212\001\002\000\004\031\206\001\002\000\004\031\175" +
    "\001\002\000\014\004\ufff1\007\ufff1\010\ufff1\011\ufff1\047" +
    "\ufff1\001\002\000\004\031\164\001\002\000\004\031\156" +
    "\001\002\000\004\032\157\001\002\000\004\027\072\001" +
    "\002\000\004\033\161\001\002\000\004\026\162\001\002" +
    "\000\022\012\151\013\150\014\147\015\154\016\152\017" +
    "\155\030\153\050\146\001\002\000\014\004\ufff2\007\ufff2" +
    "\010\ufff2\011\ufff2\047\ufff2\001\002\000\004\032\165\001" +
    "\002\000\006\045\045\046\044\001\002\000\004\033\172" +
    "\001\002\000\006\033\uffed\036\170\001\002\000\006\045" +
    "\045\046\044\001\002\000\004\033\uffee\001\002\000\004" +
    "\026\173\001\002\000\022\012\151\013\150\014\147\015" +
    "\154\016\152\017\155\030\153\050\146\001\002\000\014" +
    "\004\ufff4\007\ufff4\010\ufff4\011\ufff4\047\ufff4\001\002\000" +
    "\004\032\176\001\002\000\006\045\074\051\073\001\002" +
    "\000\006\033\uffeb\036\204\001\002\000\004\033\201\001" +
    "\002\000\004\026\202\001\002\000\022\012\151\013\150" +
    "\014\147\015\154\016\152\017\155\030\153\050\146\001" +
    "\002\000\014\004\ufff3\007\ufff3\010\ufff3\011\ufff3\047\ufff3" +
    "\001\002\000\006\045\074\051\073\001\002\000\004\033" +
    "\uffec\001\002\000\006\045\045\046\044\001\002\000\004" +
    "\026\210\001\002\000\022\012\151\013\150\014\147\015" +
    "\154\016\152\017\155\030\153\050\146\001\002\000\014" +
    "\004\ufff7\007\ufff7\010\ufff7\011\ufff7\047\ufff7\001\002\000" +
    "\006\045\045\046\044\001\002\000\004\026\214\001\002" +
    "\000\022\012\151\013\150\014\147\015\154\016\152\017" +
    "\155\030\153\050\146\001\002\000\014\004\ufff6\007\ufff6" +
    "\010\ufff6\011\ufff6\047\ufff6\001\002\000\006\045\045\046" +
    "\044\001\002\000\004\026\220\001\002\000\022\012\151" +
    "\013\150\014\147\015\154\016\152\017\155\030\153\050" +
    "\146\001\002\000\014\004\ufff5\007\ufff5\010\ufff5\011\ufff5" +
    "\047\ufff5\001\002\000\006\045\045\046\044\001\002\000" +
    "\004\026\224\001\002\000\022\012\151\013\150\014\147" +
    "\015\154\016\152\017\155\030\153\050\146\001\002\000" +
    "\014\004\ufff8\007\ufff8\010\ufff8\011\ufff8\047\ufff8\001\002" +
    "\000\004\002\uffff\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\225\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\012\001\001\000" +
    "\004\002\027\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\020\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\023" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\026\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\010\032\014\040\001\001\000\002\001\001\000\004\002" +
    "\117\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\010" +
    "\041\014\040\001\001\000\002\001\001\000\004\015\045" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\011\052\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\015\057" +
    "\001\001\000\002\001\001\000\004\011\061\001\001\000" +
    "\002\001\001\000\004\015\063\001\001\000\002\001\001" +
    "\000\004\011\065\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\007\070\001\001\000\002\001\001\000\004" +
    "\016\074\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\016\076\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\007\101\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\011\104\001\001\000\002" +
    "\001\001\000\004\015\106\001\001\000\002\001\001\000" +
    "\004\011\110\001\001\000\002\001\001\000\004\015\112" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\015" +
    "\115\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\015\121\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\003\127\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\002\130\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\003\135\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\003\142\001\001\000\002\001\001\000\004\004" +
    "\144\001\001\000\004\002\225\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\007\157\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\004\162\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\005\165\015" +
    "\166\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\005\170\015\166\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\004\173\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\006\177\016\176\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\004\202" +
    "\001\001\000\002\001\001\000\006\006\204\016\176\001" +
    "\001\000\002\001\001\000\004\015\206\001\001\000\002" +
    "\001\001\000\004\004\210\001\001\000\002\001\001\000" +
    "\004\015\212\001\001\000\002\001\001\000\004\004\214" +
    "\001\001\000\002\001\001\000\004\015\216\001\001\000" +
    "\002\001\001\000\004\004\220\001\001\000\002\001\001" +
    "\000\004\015\222\001\001\000\002\001\001\000\004\004" +
    "\224\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private GraficaBarras gBarras = new GraficaBarras();

    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s){ 
        System.err.println("Error Sintáctico en la Línea " + (s.left) +" Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
    } 
    /**
     * Método al que se llama en el momento en que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
            System.err.println("Error síntactico irrecuperable en la Línea " + (s.left)+ " Columna "+s.right+". Componente " + s.value + " no reconocido.");
    }  


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= A EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // A ::= definirglobales llaveabre B A 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("A",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // A ::= graficabarras llaveabre C A 
            {
              Object RESULT =null;
		
        main.Main.graficasDeBarras.add(gBarras);
        gBarras = new GraficaBarras();    
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("A",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // A ::= graficalineas llaveabre I A 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("A",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // A ::= galeria llaveabre K A 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("A",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // A ::= aceptacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("A",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // B ::= str identificador igual cadena puntoycoma B 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
            main.Main.variablesGlobales.add(new Variable("str", a, b));
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("B",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // B ::= entero identificador igual numero puntoycoma B 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
            main.Main.variablesGlobales.add(new Variable("entero", a, b));
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("B",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // B ::= llavecierra 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("B",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // C ::= id dospuntos D puntoycoma C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
            gBarras.setId(a);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("C",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // C ::= titulo dospuntos D puntoycoma C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
            gBarras.setTitulo(a);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("C",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // C ::= titulox dospuntos D puntoycoma C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
            gBarras.setTituloX(a);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("C",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // C ::= tituloy dospuntos D puntoycoma C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
            gBarras.setTituloY(a);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("C",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // C ::= ejex dospuntos corcheteabre E corchetecierra puntoycoma C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("C",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // C ::= ejey dospuntos corcheteabre F corchetecierra puntoycoma C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("C",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // C ::= puntosxy dospuntos corcheteabre H corchetecierra puntoycoma C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("C",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // C ::= llavecierra 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("C",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // D ::= cadena 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = a;    
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("D",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // D ::= identificador 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = a;    
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("D",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // E ::= D coma E 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
        gBarras.setEjeX(a); 
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // E ::= D 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        gBarras.setEjeX(a); 
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // F ::= G coma F 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
        gBarras.setEjeY(a); 
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("F",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // F ::= G 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        gBarras.setEjeY(a); 
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("F",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // G ::= numero 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = Integer.parseInt(a);    
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("G",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // G ::= identificador 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = Integer.parseInt(a);    
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("G",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // H ::= llaveabre G coma G llavecierra coma H 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
        gBarras.setPuntosXY(a,b); 
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("H",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // H ::= llaveabre G coma G llavecierra 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        gBarras.setPuntosXY(a,b); 
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("H",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // I ::= M I 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("I",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // I ::= definirxyline interrogacionabre J 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("I",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // I ::= llavecierra 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("I",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // J ::= nombre dospuntos D puntoycoma J 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("J",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // J ::= color dospuntos D puntoycoma J 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("J",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // J ::= grosor dospuntos D puntoycoma J 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("J",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // J ::= puntos dospuntos corcheteabre H corchetecierra puntoycoma J 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("J",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // J ::= interrogacioncierra 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("J",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // K ::= galeria parentesisabre cadena coma L parentesiscierra puntoycoma K 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("K",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // K ::= llavecierra 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("K",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // L ::= cadena coma L 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("L",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // L ::= cadena 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("L",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // M ::= id dospuntos D puntoycoma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("M",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // M ::= titulo dospuntos D puntoycoma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("M",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // M ::= titulox dospuntos D puntoycoma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("M",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // M ::= tituloy dospuntos D puntoycoma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("M",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
